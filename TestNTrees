/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var ThuDuc = ee.FeatureCollection("projects/ee-codeforrs/assets/ThuDuc");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
function maskS2cloudsQA60(image) {
  var qa = image.select('QA60');
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  // mask QA60
  var maskQA = qa.bitwiseAnd(cloudBitMask).neq(0)
                .or(qa.bitwiseAnd(cirrusBitMask).neq(0));
  // mask sáng bất thường (mây có phản xạ cao ở B2,B3,B4)
  var bright = image.select(['B2','B3','B4']).divide(10000)  // scale reflectance
                    .gt(0.2)
                    .reduce(ee.Reducer.anyNonZero());

  // mask NDVI thấp (không phải thực vật)
  var ndvi = image.normalizedDifference(['B8','B4']);
  var ndbi = image.normalizedDifference(['B11', 'B8']).rename(['ndbi']);
  var lowNDBI = ndbi.lt(0.1);
  var lowNdvi = ndvi.lt(0.15);
    // Phát hiện mây sáng bằng phổ (Blue cao, SWIR thấp)
  var blue = image.select('B2').divide(10000);
  var swir = image.select('B9').divide(10000); // SWIR1
  var brightCloud = blue.gt(0.2).and(swir.lt(0.15).and(lowNDBI));
  // kết hợp
  var finalMask = maskQA.or(brightCloud);
  //.or(bright.and(lowNdvi));//.and(cloudCandidate));

  return image.updateMask(finalMask.not())//.updateMask(shadow.not())
              .copyProperties(image, ['system:time_start']);
}

// 3. Hàm lọc mây bằng Cloud Probability + SCL
function maskCloudsSCL_CloudProb(img, cloudProbCollection) {
  var cloudProbImg = cloudProbCollection
    .filter(ee.Filter.eq('system:index', img.get('system:index')))
    .first();
  var cloudMask = ee.Algorithms.If(
    cloudProbImg,
    ee.Image(cloudProbImg).select('probability').lt(40),
    ee.Image(1)
  );
  var scl = img.select('SCL');
  var sclMask = (scl.neq(3)).and(scl.neq(8)).and(scl.neq(9))
                   .and(scl.neq(10)).and(scl.neq(11));
  return img.updateMask(ee.Image(cloudMask).and(sclMask));
}

// 4. Hàm tính chỉ số
function addIndices(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename(['ndvi']);
  var ndbi = image.normalizedDifference(['B11', 'B8']).rename(['ndbi']);
  var mndwi = image.normalizedDifference(['B3', 'B11']).rename(['mndwi']); 
  var bsi = image.expression(
      '(( X + Y ) - (A + B)) /(( X + Y ) + (A + B)) ', {
        'X': image.select('B11'),
        'Y': image.select('B4'),
        'A': image.select('B8'),
        'B': image.select('B2'),
  }).rename('bsi');
  return image.addBands(ndvi).addBands(ndbi).addBands(mndwi).addBands(bsi);
}

// 5. Hàm chuẩn hóa ảnh
// Chuẩn hóa THEO TỪNG BAND (tránh NaN mask hết)
function normalize(image) {
  var bandNames = image.bandNames();
  var minDict = image.reduceRegion({
    reducer: ee.Reducer.min(),
    geometry: ThuDuc, scale: 10, maxPixels: 1e9
  });
  var maxDict = image.reduceRegion({
    reducer: ee.Reducer.max(),
    geometry: ThuDuc, scale: 10, maxPixels: 1e9
  });
  var mins = ee.Image.constant(bandNames.map(function(b){ return minDict.get(b); })).rename(bandNames);
  var maxs = ee.Image.constant(bandNames.map(function(b){ return maxDict.get(b); })).rename(bandNames);
  return image.subtract(mins).divide(maxs.subtract(mins).max(1e-6)).rename(bandNames);
}

// 6. Hàm lấy ảnh Sentinel-2 theo năm/tháng
function getSentinelImage(year, quarter, geometry) {
  var numericYear = ee.Number.parse(year);
  var numericQuarter = ee.Number.parse(quarter);
  var startMonth = numericQuarter.subtract(1).multiply(3).add(1);  // 1, 4, 7, 10
  var startDate = ee.Date.fromYMD(numericYear, startMonth, 1);
  var endDate = startDate.advance(3, 'month');
  if (numericYear.getInfo() <= 2018) {
    var s2 = ee.ImageCollection("COPERNICUS/S2_HARMONIZED")
      .filterBounds(geometry)
      .filterDate(startDate, endDate)
      // .sort('CLOUDY_PIXEL_PERCENTAGE')
      // .limit(25)
      .select(['B2','B3','B4','B8','B9','B11','B12','QA60']);
      // .select(['B2','B3','B4','B8','B11','B9','QA60']);
    print(s2.size(),'Sử dụng QA60 - TOA');
    var masked = s2.map(maskS2cloudsQA60);
    return masked.median().clip(geometry);//.multiply(0.0001)
  } else {
    var s2SR = ee.ImageCollection("COPERNICUS/S2_SR")
      .filterBounds(geometry)
      .filterDate(startDate, endDate)
      // .sort('CLOUDY_PIXEL_PERCENTAGE')
      // .limit(25)
      .select(['B2','B3','B4','B8','B11','SCL']);
        // .select([
      //   'B1','B2','B3','B4','B5','B6','B7','B8',
      //   'B8A','B9','B11','B12','SCL']);
    print(s2SR.size(),'Sử dụng SCL - SR')
    var s2Clouds = ee.ImageCollection("COPERNICUS/S2_CLOUD_PROBABILITY")
      .filterBounds(geometry)
      .filterDate(startDate, endDate);
    var maskedSR = s2SR.map(function (img) {
      return maskCloudsSCL_CloudProb(img, s2Clouds);
    });
    return ee.ImageCollection(maskedSR).median().clip(geometry);//
  }
}
// Tham số hiển thị
var visParams = {
  bands: ['B4','B3','B2'],
  min: 0,
  max: 0.4,
  gamma: 1.2
};
var visHNN = {
  bands: ['B8', 'B4', 'B3'], 
  min: 0,
  max: 0.4,
  gamma: 1
};
var palette = ['green', 'red', 'blue', 'gray', 'yellow'];
Map.centerObject(ThuDuc,11)
var year = 2018
var quarters = '04'; 
// Lay Mau Co Dinh 
// var trainingFixed = ee.FeatureCollection('projects/ee-codeforrs/assets/NCKH/Sample_Fixed')
var trainingPoints = ee.FeatureCollection('projects/ee-codeforrs/assets/'+ year + '/training_sample_Quy' + quarters );
//  *** Phan Loai Va Kiem Dinh
var img = getSentinelImage(year.toString(), quarters, ThuDuc);
var img = addIndices(img);
var img = normalize(img)

// var selectedBands = ['bsi','mndwi','ndvi','B4'];
var selectedBands = ['bsi','ndvi','ndbi','mndwi'];////tot nhat mà nhanh 
// ['B2','B3','B4','B8','B11','ndvi','ndbi','mndwi','bsi'];
var imgSel = img.select(selectedBands);
print(imgSel)

var training = imgSel.sampleRegions({
  collection: trainingPoints,
  properties: ['class'],
  scale: 10,
  geometries: true  // giữ lại hình học của điểm
}).filter(ee.Filter.notNull(selectedBands)); // chỉ giữ điểm không bị mask;
print(training.size(),'mẫu hợp lệ sau khi mask ')
var classCountsTrain = training.aggregate_histogram('class');
print('Số lượng mẫu từng class sau khi Mask :', classCountsTrain);
// Chia tập dữ liệu: 60% train, 40% test
var split = 0.7;
var withRandom = training.randomColumn('random');
var trainingSet = withRandom.filter(ee.Filter.lt('random', split));
var testSet = withRandom.filter(ee.Filter.gte('random', split));

//  Kiểm tra số cây 
var results = [];
for (var i = 10; i <= 400; i += 10) {
  var nTrees = i;
  var rf = ee.Classifier.smileRandomForest({numberOfTrees: nTrees, seed: 0})
    .train({
      features: trainingSet,
      classProperty: 'class',
      inputProperties: imgSel.bandNames()
    });
  var cm = testSet.classify(rf).errorMatrix('class', 'classification');
  results.push(ee.Feature(null, {
    nTrees: nTrees,
    accuracy: cm.accuracy(),
    kappa: cm.kappa()
  }));
}
var resultsFC = ee.FeatureCollection(results);
print('Best', resultsFC.sort('accuracy', false).limit(3));

// Xuất ra CSV
Export.table.toDrive({
  collection: resultsFC,
  description: 'Model_NTrees_'+ year + '_Quy' + quarters,
  folder: 'EarthEngine_Exports',
  fileFormat: 'CSV'
});
// // =====================
// // 5. HIỂN THỊ LÊN MAP (tùy chọn)
// // =====================
Map.addLayer(img, {bands: ['B4','B3','B2'], min: 0, max: 0.4}, 'Image RGB');
//Map.addLayer(trainingFixed,{min: 0, max: 4, palette: ['green','red',  'blue', 'gray', 'yellow']},'Mẫu Đã chọn');
//Map.addLayer(img.classify(rf), {min: 0, max: 4, palette: ['green','red',  'blue', 'gray', 'yellow']}, 'Classified RF');



